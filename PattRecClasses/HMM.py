import numpy as np
from .DiscreteD import DiscreteD
from .GaussD import GaussD
from .MarkovChain import MarkovChain

class HMM:
    """
    HMM - class for Hidden Markov Models, representing
    statistical properties of random sequences.
    Each sample in the sequence is a scalar or vector, with fixed DataSize.
    
    Several HMM objects may be collected in a single multidimensional array.
    
    A HMM represents a random sequence(X1,X2,....Xt,...),
    where each element Xt can be a scalar or column vector.
    The statistical dependence along the (time) sequence is described
    entirely by a discrete Markov chain.
    
    A HMM consists of two sub-objects:
    1: a State Sequence Generator of type MarkovChain
    2: an array of output probability distributions, one for each state
    
    All states must have the same class of output distribution,
    such as GaussD, GaussMixD, or DiscreteD, etc.,
    and the set of distributions is represented by an object array of that class,
    although this is NOT required by general HMM theory.
    
    All output distributions must have identical DataSize property values.
    
    Any HMM output sequence X(t) is determined by a hidden state sequence S(t)
    generated by an internal Markov chain.
    
    The array of output probability distributions, with one element for each state,
    determines the conditional probability (density) P[X(t) | S(t)].
    Given S(t), each X(t) is independent of all other X(:).
    
    
    References:
    Leijon, A. (20xx) Pattern Recognition. KTH, Stockholm.
    Rabiner, L. R. (1989) A tutorial on hidden Markov models
    	and selected applications in speech recognition.
    	Proc IEEE 77, 257-286.
    
    """
    def __init__(self, mc, distributions):
        self.stateGen = mc
        self.outputDistr = distributions
        self.nStates = mc.nStates
        self.dataSize = distributions[0].dataSize

    @staticmethod
    def log_sum_exp(x, axis=None):
        """Numerically stable log-sum-exp with dimension control"""
        xmax = np.max(x, axis=axis, keepdims=True)
        x = x - xmax
        result = np.log(np.sum(np.exp(x), axis=axis, keepdims=True)) + xmax
        if axis is not None:
            result = np.squeeze(result, axis=axis)
        return result

    def rand(self, nSamples):
        """
        [X,S]=rand(self,nSamples); generates a random sequence of data
        from a given Hidden Markov Model.
        
        Input:
        nSamples=  maximum no of output samples (scalars or column vectors)
        
        Result:
        X= matrix or row vector with output data samples
        S= row vector with corresponding integer state values
          obtained from the self.StateGen component.
          nS= length(S) == size(X,2)= number of output samples.
          If the StateGen can generate infinite-duration sequences,
              nS == nSamples
          If the StateGen is a finite-duration MarkovChain,
              nS <= nSamples
        """
        print(f"[HMM] Generating random sequence of length {nSamples}")
        S = self.stateGen.rand(nSamples)
        nS = len(S)
        
        if self.dataSize == 1:
            X = np.zeros(nS)
        else:
            X = np.zeros((self.dataSize, nS))
        
        for t, state in enumerate(S):
            distr = self.outputDistr[state-1]
            if isinstance(distr, GaussD):
                x = distr.rand(1)
            elif isinstance(distr, DiscreteD):
                x = distr.rand(1)
            else:
                raise ValueError("Unsupported distribution type")
            
            if self.dataSize == 1:
                X[t] = x
            else:
                X[:, t] = x.reshape(-1)
        print("[HMM] Random sequence generation done")
        return X, S

    def log_forward(self, observations):
        """Forward algorithm in log domain"""
        T = len(observations)
        N = self.nStates
        log_alpha = np.zeros((N, T))
        
        log_emissions = np.log([d.prob(observations[0]) + 1e-20 for d in self.outputDistr])
        log_alpha[:, 0] = np.log(self.stateGen.q + 1e-20) + log_emissions
        
        for t in range(1, T):
            for j in range(N):
                log_trans = np.log(self.stateGen.A[:, j] + 1e-20) + log_alpha[:, t-1]
                log_sum = self.log_sum_exp(log_trans)
                log_emission = np.log(self.outputDistr[j].prob(observations[t]) + 1e-20)
                log_alpha[j, t] = log_sum + log_emission
        
        return log_alpha

    def log_backward(self, observations):
        """Backward algorithm in log domain"""
        T = len(observations)
        N = self.nStates
        log_beta = np.zeros((N, T))
        log_beta[:, T-1] = 0.0  
        
        for t in range(T-2, -1, -1):
            for i in range(N):
                log_terms = np.zeros(N)
                for j in range(N):
                    log_trans = np.log(self.stateGen.A[i, j] + 1e-20)
                    log_emission = np.log(self.outputDistr[j].prob(observations[t+1]) + 1e-20)
                    log_terms[j] = log_trans + log_emission + log_beta[j, t+1]
                log_beta[i, t] = self.log_sum_exp(log_terms)
        
        return log_beta

    def train(self, observations_list, n_iter=1):
        """
        Train HMM for n_iter iterations
        Returns average log-likelihood per sequence
        """
        total_sequences = len(observations_list)
        total_logL = 0.0
        
        for iteration in range(n_iter):
            initial_acc = np.zeros(self.nStates)
            trans_acc = np.zeros((self.nStates, self.nStates))
            gamma_acc = [np.zeros(self.dataSize) for _ in range(self.nStates)]
            gamma_x2_acc = [np.zeros(self.dataSize) for _ in range(self.nStates)]
            gamma_count = np.zeros(self.nStates)
            iter_logL = 0.0  
            
            for observations in observations_list:
                T = len(observations)
                if T < 2:
                    continue

                log_alpha = self.log_forward(observations)
                log_beta = self.log_backward(observations)
                log_likelihood = self.log_sum_exp(log_alpha[:, T-1])
                iter_logL += float(log_likelihood) 
                
                log_gamma = log_alpha + log_beta - log_likelihood
                gamma = np.exp(log_gamma)
                
                log_xi = np.zeros((self.nStates, self.nStates, T-1))
                for t in range(T-1):
                    for i in range(self.nStates):
                        for j in range(self.nStates):
                            log_xi[i, j, t] = (
                                log_alpha[i, t] +
                                np.log(self.stateGen.A[i, j] + 1e-20) +
                                np.log(self.outputDistr[j].prob(observations[t+1]) + 1e-20) +
                                log_beta[j, t+1] -
                                log_likelihood
                            )
                xi = np.exp(log_xi)
                
                initial_acc += gamma[:, 0]
                trans_acc += np.sum(xi, axis=2)
                
                for j in range(self.nStates):
                    gamma_count[j] += np.sum(gamma[j, :])
                    gamma_acc[j] += np.sum(observations * gamma[j, :, None], axis=0)
                    gamma_x2_acc[j] += np.sum(observations**2 * gamma[j, :, None], axis=0)

            self.stateGen.q = initial_acc / np.sum(initial_acc)
            
            row_sums = np.sum(trans_acc, axis=1, keepdims=True)
            self.stateGen.A = trans_acc / np.where(row_sums == 0, 1e-10, row_sums)
            self.stateGen.A = 0.8 * self.stateGen.A + 0.2 * np.eye(self.nStates)
            
            for j in range(self.nStates):
                if gamma_count[j] > 0:
                    new_means = gamma_acc[j] / gamma_count[j]
                    
                    new_vars = gamma_x2_acc[j] / gamma_count[j] - new_means**2
                    new_vars = np.maximum(new_vars, 1e-6)  # Ensure positivity
                    
                    self.outputDistr[j].means = new_means
                    self.outputDistr[j].variance = new_vars
                    self.outputDistr[j].stdevs = np.sqrt(new_vars)
                    self.outputDistr[j].cov = np.diag(new_vars)
            
            avg_logL = iter_logL / total_sequences if total_sequences > 0 else 0
            print(f"  Iteration {iteration+1}: Avg logL = {avg_logL:.2f}")
            
            total_logL += avg_logL
        
        return total_logL / n_iter if n_iter > 0 else 0

    def viterbi(self, observations):
        """Viterbi decoding with fixed initialization"""
        T = len(observations)
        N = self.nStates
        delta = np.zeros((N, T))
        psi = np.zeros((N, T), dtype=int)
        
        log_emissions = np.log([d.prob(observations[0]) + 1e-20 for d in self.outputDistr])
        delta[:, 0] = np.log(self.stateGen.q + 1e-20) + log_emissions
        
        for t in range(1, T):
            for j in range(N):
                trans_prob = np.log(self.stateGen.A[:, j] + 1e-20)
                prev = delta[:, t-1] + trans_prob
                psi[j, t] = np.argmax(prev)
                emission_prob = np.log(self.outputDistr[j].prob(observations[t]) + 1e-20)
                delta[j, t] = prev[psi[j, t]] + emission_prob
        
        states = np.zeros(T, dtype=int)
        states[-1] = np.argmax(delta[:, -1])
        for t in range(T-2, -1, -1):
            states[t] = psi[states[t+1], t+1]
            
        return states + 1 